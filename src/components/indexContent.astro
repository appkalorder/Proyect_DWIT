---
import Header from "./Header.astro"
import Panel from "./PanelBody.astro"
import LineChart from "./LineChart"
import { getLatestMeasurements } from '@scripts/obtener-medidas.js';

// Obtener medidas
const measurements = await getLatestMeasurements();
---

<!-- Contenido de la página -->
<main class="p-4 flex flex-wrap">
  <Header />
  <div
    class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 sm:w-1/2 lg:w-2/5 w-full"
  >
    <div class="col-span-full">
      <Panel>
        <div class="flex items-center justify-between" id="userStats">
          <h2>Edad: <span class="text-cyan-500" id="userAge">--</span></h2>
          <h2>
            Tiempo entrenando: <span class="text-cyan-500" id="trainingTime">--</span>
          </h2>
          <h2>IMC: <span class="text-cyan-500" id="imc">--</span></h2>
        </div>
      </Panel>
    </div>
    {
      measurements.measurements.map((item) => (
        <Panel>
          <div class="flex flex-col h-25 justify-between">
            {" "}
            {/* Added fixed height and padding */}
            <label class="text-sm font-medium text-gray-400 dark:text-gray-300">
              {item.label} ({item.unit}):
            </label>
            {item.values ? (
              <div class="flex flex-col flex-1">
                {" "}
                {/* Added flex-1 to fill space */}
                <div class="flex justify-between pt-3">
                  <span class="lg:text-4xl md:text-3xl font-bold text-gray-900 dark:text-white">
                    {item.values.izq}
                  </span>
                  <span class="lg:text-4xl md:text-3xl font-bold text-gray-900 dark:text-white">
                    {item.values.der}
                  </span>
                </div>
                <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">
                  <span>
                    <svg
                      width="24px"
                      height="24px"
                      viewBox="0 0 24 24"
                      id="left-arrow"
                      xmlns="http://www.w3.org/2000/svg"
                      class="text-gray-500 dark:text-gray-400"
                    >
                      <g id="SVGRepo_bgCarrier" stroke-width="0" />
                      <g
                        id="SVGRepo_tracerCarrier"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <g id="SVGRepo_iconCarrier">
                        <path
                          id="primary"
                          d="M21,12H3M6,9,3,12l3,3"
                          style="fill: none; stroke: currentColor; stroke-linecap: round; stroke-linejoin: round; stroke-width: 1.5;"
                        />
                      </g>
                    </svg>
                  </span>
                  <span>
                    <svg
                      fill="#000000"
                      width="24px"
                      height="24px"
                      viewBox="0 0 24 24"
                      id="left-arrow"
                      xmlns="http://www.w3.org/2000/svg"
                      class="text-gray-500 dark:text-gray-400"
                      transform="matrix(-1, 0, 0, 1, 0, 0)"
                    >
                      <g id="SVGRepo_bgCarrier" stroke-width="0" />
                      <g
                        id="SVGRepo_tracerCarrier"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <g id="SVGRepo_iconCarrier">
                        <path
                          id="primary"
                          d="M21,12H3M6,9,3,12l3,3"
                          style="fill: none; stroke: currentColor; stroke-linecap: round; stroke-linejoin: round; stroke-width: 1.5;"
                        />
                      </g>
                    </svg>
                  </span>
                </div>
              </div>
            ) : (
              <div class="flex items-center flex-1">
                {" "}
                {/* Added flex-1 to fill space */}
                <span class="lg:text-4xl md:text-3xl font-bold text-gray-900 dark:text-white">
                  {item.value}
                </span>
              </div>
            )}
          </div>
        </Panel>
      ))
    }
  </div>

  <div class="sm:w-1/2 lg:w-3/5 w-full">
    <Panel>
      <LineChart client:load />
    </Panel>
  </div>
</main>


<script>
  interface User {
    id: number;
    nombre: string;
    fecha_nacimiento: string;
    años_entrenando: number;  // Changed to number since it stores direct years
  }

  const user: User | null = JSON.parse(localStorage.getItem('user') || 'null');
  
  const calculateAge = (birthDate: string): number => {
    const birth = new Date(birthDate);
    const now = new Date();
    let age = now.getFullYear() - birth.getFullYear();
    const monthDiff = now.getMonth() - birth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && now.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  };

  const calculateTrainingTime = (years: number): string => {
    return years.toString();  // Simply convert the number to string since it's already in years
  };

  const calculateIMC = (height: number, weight: number): string => {
    if (height <= 0 || weight <= 0 || isNaN(height) || isNaN(weight)) return 'N/A';
    const heightInMeters = height / 100;
    const imc = weight / (heightInMeters * heightInMeters);
    return imc.toFixed(2);
  };

  if (user) {
    const userAgeElement = document.getElementById('userAge');
    const trainingTimeElement = document.getElementById('trainingTime');
    const imcElement = document.getElementById('imc');

    // Update age
    if (userAgeElement && user.fecha_nacimiento) {
      const age = calculateAge(user.fecha_nacimiento);
      userAgeElement.textContent = `${age} años`;
    }

    // Update training time - simplified since años_entrenando is already a number
    if (trainingTimeElement && user.años_entrenando) {
      trainingTimeElement.textContent = `${user.años_entrenando} años`;
    }

    // Update IMC
    if (imcElement) {
      const measurements = document.querySelectorAll('.flex-col.h-25');
      let height = 0;
      let weight = 0;

      measurements.forEach(item => {
        const labelElement = item.querySelector('label');
        const valueElement = item.querySelector('span.lg\\:text-4xl');
        
        if (labelElement && valueElement) {
          const label = labelElement.textContent || '';
          const value = valueElement.textContent || '0';
          
          if (label.includes('Altura')) {
            height = parseFloat(value);
          }
          if (label.includes('Peso')) {
            weight = parseFloat(value);
          }
        }
      });

      console.log('Found measurements - Height:', height, 'Weight:', weight);
      const imc = calculateIMC(height, weight);
      imcElement.textContent = imc;
    }
  }
</script>